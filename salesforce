<template>
   
    <div class="slds-grid slds-card slds-grid_align_spread">         
        <lightning-card  class="blue-icon spacing-large slds-float_left slds-col" title="Open a Support Case" icon-name="utility:news">
            <!-- <span>(average response time is less than 4 hours)</span> -->
            <p class="slds-p-horizontal_large">Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>              
        </lightning-card>
        <lightning-button class="slds-button_neutral slds-col slds-align_absolute-center" variant="brand" label="CONTACT US" slot="actions" onclick={showModal}></lightning-button> 
    </div>
        <template if:true={openModal}>  
          <div class="slds-modal slds-fade-in-open slds-backdrop" >  
            <div class="slds-modal__container">  
              <!---HEADER Section-->  
              <div class="slds-modal__header" style="display:flex"> 
                <div id="variants" class="slds-p-vertical_x-small slds-grid slds-grid_vertical-align-left">                                
                    <lightning-icon icon-name="utility:news" alternative-text="Contact" variant="brand" class="blue-icon slds-col slds-p-right_small"> </lightning-icon>
                    <p class="text">
                    <lightning-formatted-text class="slds-form-element__label slds-text-heading_medium slds-col" value="Open a Support Case"></lightning-formatted-text></p>
                 </div>    
               
                <lightning-button-icon icon-name="utility:close" alternative-text="Close this window" size="large"  
                  variant="bare-inverse" onclick={closeModal} class="slds-modal__close">  
                </lightning-button-icon> 
              </div>  
              <!---Body Section-->  
              <div class="slds-modal__content slds-p-around_medium">   
                    <template if:true={caseOriginValues.data}>
                            <a href="#"><u><b>Track My Cases</b></u></a>
                    <lightning-combobox class="borderForm slds-form-element__static" name="progress" label="Category" value={value} placeholder="Select Request Category" 
                            options={caseOriginValues.data.values} onchange={handleChange} style="padding-top:4px">
                    </lightning-combobox>                     
                    </template>
                    <div class="slds-grid slds-gutters">
                        <div class="slds-col">
                    <template if:true={caseOriginValue.data}>                    
                        <lightning-combobox name="progress" label="Client" value={value} placeholder="Select Client" 
                        options={caseOriginValue.data.values} onchange={handleChange1}>
                       </lightning-combobox>                
                    </template>
                </div>
                
                <!-- <div class="slds-col">
                    <template if:true={caseOriginValue.data}>                    
                        <lightning-combobox name="progress" label="Card" value={value} placeholder="Select Card" 
                        options={caseOriginValue.data.values} onchange={handleChange}>
                       </lightning-combobox>                
                    </template>
                </div> -->
               
                </div>
                <div>
                    <lightning-textarea name="Description" label="Description" onchange={onChangeDescription} ></lightning-textarea>
    
                </div>
                    <lightning-file-upload
                    name="fileUploader"
                    accept={acceptedFormats}
                    record-id={recordId}
                    onuploadfinished={handleUploadFinished}
                    multiple>
                </lightning-file-upload>
                </div> 
              
              <!---Footer Section-->  
              <div class="slds-modal__footer ">  
                <lightning-button class="slds-align_absolute-center" label="SUBMIT" variant="brand" onclick={handleClick}>  
                </lightning-button>  
              </div>  
            </div>  
          </div>  
        </template>  
        
      </template> 
      
      
      
      js:
      
      import { LightningElement,wire,track,api } from 'lwc';
import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import CATEGORY_FIELD from '@salesforce/schema/Case.Case_Category__c';
//import CaseValue from '@salesforce/schema/Case.CaseValue__c';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import CASE_OBJECT from '@salesforce/schema/Case';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';

import DESCRIPTION_FIELD from "@salesforce/schema/Case.Description";
import { createRecord } from "lightning/uiRecordApi";



export default class ContactSupport extends LightningElement {
   @track description;
    @track openModal = false;
    @api recordId;
   @track category;

    handleClick() {
        console.log('1');
  
        //3. Map the data to the fields
        const fields = {};
    
        
        fields[DESCRIPTION_FIELD.fieldApiName] = this.description;
        fields[CATEGORY_FIELD.fieldApiName] = this.category;
        console.log('2'+ fields);

            //4. Prepare config object with object and field API names 
        const recordInput = {
          apiName: CASE_OBJECT.objectApiName,
          fields: fields
        };
            
            //5. Invoke createRecord by passing the config object
        // createRecord(recordInput).then((record) => {

        //   console.log('created'+ record);
        //   this.openModal = false;

        // });



        
            createRecord(recordInput)
            .then(record => {
                // this.accountId = record.id;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Account created',
                        variant: 'success',
                    }),
                );
                this[NavigationMixin.Navigate]({
                    type: 'standard__recordPage',
                    attributes: {
                        recordId: record.id,
                        objectApiName: 'Case',
                        actionName: 'view'
                    },
                });
    
    
    
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
        }
      
    


    onChangeDescription(event) {
        this.description = event.target.value;
        console.log(this.description);
        
    }

    showModal() {
        this.openModal = true;
    }
    closeModal() {
        this.openModal = false;
    }
    
    get acceptedFormats() {
        return ['.pdf', '.png','.jpg','.jpeg'];
    }
    handleUploadFinished(event) {
        // Get the list of uploaded files
        const uploadedFiles = event.detail.files;
        let uploadedFileNames = '';
        for(let i = 0; i < uploadedFiles.length; i++) {
            uploadedFileNames += uploadedFiles[i].name + ', ';
        }
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: uploadedFiles.length + ' Files uploaded Successfully: ' + uploadedFileNames,
                variant: 'success',
            }),
        );
    }
    handleChange(event){
        this.category= event.target.value;
    }

    @wire(getObjectInfo, { objectApiName: CASE_OBJECT })
    contactInfo;

    @wire(getPicklistValues,
        {
            recordTypeId: '$contactInfo.data.defaultRecordTypeId',
            fieldApiName: Case_Category__c
        }
    )
    caseOriginValues;


    // @wire(getPicklistValues,
    //     {
    //         recordTypeId: '$contactInfo.data.defaultRecordTypeId',
    //         fieldApiName: Case_Category__c
    //     }
    // )
    // caseOriginValue;

}
