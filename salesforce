import { LightningElement,wire,track,api } from 'lwc';
import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import CATEGORY_FIELD from '@salesforce/schema/Case.Case_Category__c';
//import CaseValue from '@salesforce/schema/Case.CaseValue__c';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import CASE_OBJECT from '@salesforce/schema/Case';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';

import DESCRIPTION_FIELD from "@salesforce/schema/Case.Description";
import { createRecord } from "lightning/uiRecordApi";



export default class ContactSupport extends LightningElement {
   @track description;
    @track openModal = false;
    @api recordId;
   @track category;

    handleClick() {
        console.log('1');
  
        //3. Map the data to the fields
        const fields = {};
    
        
        fields[DESCRIPTION_FIELD.fieldApiName] = this.description;
        fields[CATEGORY_FIELD.fieldApiName] = this.category;
        console.log('2'+ fields);

            //4. Prepare config object with object and field API names 
        const recordInput = {
          apiName: CASE_OBJECT.objectApiName,
          fields: fields
        };
            
            //5. Invoke createRecord by passing the config object
        // createRecord(recordInput).then((record) => {

        //   console.log('created'+ record);
        //   this.openModal = false;

        // });



        
            createRecord(recordInput)
            .then(record => {
                // this.accountId = record.id;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Account created',
                        variant: 'success',
                    }),
                );
                this[NavigationMixin.Navigate]({
                    type: 'standard__recordPage',
                    attributes: {
                        recordId: record.id,
                        objectApiName: 'Case',
                        actionName: 'view'
                    },
                });
    
    
    
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
        }
      }
    


    onChangeDescription(event) {
        this.description = event.target.value;
        console.log(this.description);
        
    }

    showModal() {
        this.openModal = true;
    }
    closeModal() {
        this.openModal = false;
    }
    
    get acceptedFormats() {
        return ['.pdf', '.png','.jpg','.jpeg'];
    }
    handleUploadFinished(event) {
        // Get the list of uploaded files
        const uploadedFiles = event.detail.files;
        let uploadedFileNames = '';
        for(let i = 0; i < uploadedFiles.length; i++) {
            uploadedFileNames += uploadedFiles[i].name + ', ';
        }
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: uploadedFiles.length + ' Files uploaded Successfully: ' + uploadedFileNames,
                variant: 'success',
            }),
        );
    }
    handleChange(event){
        this.category= event.target.value;
    }

    @wire(getObjectInfo, { objectApiName: CASE_OBJECT })
    contactInfo;

    @wire(getPicklistValues,
        {
            recordTypeId: '$contactInfo.data.defaultRecordTypeId',
            fieldApiName: Case_Category__c
        }
    )
    caseOriginValues;


    @wire(getPicklistValues,
        {
            recordTypeId: '$contactInfo.data.defaultRecordTypeId',
            fieldApiName: Case_Category__c
        }
    )
    caseOriginValue;

}
