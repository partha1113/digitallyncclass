html:=====================================================================
<template>
    <lightning-card title="Client Due Diligence Fields">
        <template if:true={clientDueDiligenceList}>
            <template for:each={clientDueDiligenceList} for:item="field">
                <lightning-input key={field.name}
                                 label={field.name}
                                 value={field.fieldsAPI}
                                 title={field.fieldHelp}>
                </lightning-input>
            </template>
        </template>
        <template if:false={clientDueDiligenceList}>
            <p>No records found.</p>
        </template>
    </lightning-card>
</template>



JS: ===================================================================

import { LightningElement, wire } from 'lwc';
import getClientDueDiligenceRecords from '@salesforce/apex/getFieldsRecords.getClientDueDiligenceRecords';

export default class DisplayFields extends LightningElement {
    clientDueDiligenceList;

    // Call the Apex method to fetch the records
    @wire(getClientDueDiligenceRecords)
    wiredClientDueDiligence({ error, data }) {
        if (data) {
            this.clientDueDiligenceList = data;
        } else if (error) {
            // Handle error
            console.error(error);
        }
    }
}



ApexClass: =====================

public class getFieldsRecords {
    public static List<ClientDueDiligenceWrapper> getClientDueDiligenceRecords() {
        List<ClientDueDiligenceWrapper> wrapperList = new List<ClientDueDiligenceWrapper>();

        // Fetch the custom metadata records
        List<clientDueDiligence__mdt> records = [SELECT name, fieldsAPI, fieldHelp FROM clientDueDiligence__mdt];

        // Convert the records into wrapper objects
        for (clientDueDiligence__mdt record : records) {
            ClientDueDiligenceWrapper wrapper = new ClientDueDiligenceWrapper();
            wrapper.name = record.name;
            wrapper.fieldsAPI = record.fieldsAPI;
            wrapper.fieldHelp = record.fieldHelp;

            wrapperList.add(wrapper);
        }

        return wrapperList;
    }

    // Wrapper class for the custom metadata records
    public class ClientDueDiligenceWrapper {
        public String name;
        public String fieldsAPI;
        public String fieldHelp;
    }
}
=============================
var getSelectedValue = document.querySelector(   
                'input[name="season"]:checked');

if(getSelectedValue != null) {   
                document.getElementById("disp").innerHTML   
                    = getSelectedValue.value   
                    + " season is selected";   
            }
            
           eval("$A.get('e.force:refreshView').fire();");


this.teamRecords.map((item, index) => {
    this.template.querySelectorAll('.descArea').forEach(element => {
        element.innerHTML = item.item.Description__c; //Contains HTML elements
    });
})
===========================================================
function arrayDifference(arr1, arr2) {
  const difference = [];

  // Check if each item in arr1 is present in arr2
  const isDifferent = arr1.every(item => !arr2.includes(item));

  // If arr1 is different from arr2, populate the difference array
  if (isDifferent) {
    difference.push(...arr1);
  }

  return difference;
}

const array1 = [1, 2, 3, 4, 5];
const array2 = [3, 4, 5, 6, 7];

const difference = arrayDifference(array1, array2);
console.log(difference);
// Output: [1, 2]
