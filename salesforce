html:=====================================================================
<template>
    <lightning-card title="Client Due Diligence Fields">
        <template if:true={clientDueDiligenceList}>
            <template for:each={clientDueDiligenceList} for:item="field">
                <lightning-input key={field.name}
                                 label={field.name}
                                 value={field.fieldsAPI}
                                 title={field.fieldHelp}>
                </lightning-input>
            </template>
        </template>
        <template if:false={clientDueDiligenceList}>
            <p>No records found.</p>
        </template>
    </lightning-card>
</template>



JS: ===================================================================

import { LightningElement, wire } from 'lwc';
import getClientDueDiligenceRecords from '@salesforce/apex/getFieldsRecords.getClientDueDiligenceRecords';

export default class DisplayFields extends LightningElement {
    clientDueDiligenceList;

    // Call the Apex method to fetch the records
    @wire(getClientDueDiligenceRecords)
    wiredClientDueDiligence({ error, data }) {
        if (data) {
            this.clientDueDiligenceList = data;
        } else if (error) {
            // Handle error
            console.error(error);
        }
    }
}



ApexClass: =====================

public class getFieldsRecords {
    public static List<ClientDueDiligenceWrapper> getClientDueDiligenceRecords() {
        List<ClientDueDiligenceWrapper> wrapperList = new List<ClientDueDiligenceWrapper>();

        // Fetch the custom metadata records
        List<clientDueDiligence__mdt> records = [SELECT name, fieldsAPI, fieldHelp FROM clientDueDiligence__mdt];

        // Convert the records into wrapper objects
        for (clientDueDiligence__mdt record : records) {
            ClientDueDiligenceWrapper wrapper = new ClientDueDiligenceWrapper();
            wrapper.name = record.name;
            wrapper.fieldsAPI = record.fieldsAPI;
            wrapper.fieldHelp = record.fieldHelp;

            wrapperList.add(wrapper);
        }

        return wrapperList;
    }

    // Wrapper class for the custom metadata records
    public class ClientDueDiligenceWrapper {
        public String name;
        public String fieldsAPI;
        public String fieldHelp;
    }
}
=============================
this.myList = this.myList.filter(value => value !== this.removeValue);
